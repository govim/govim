package main

import (
	"testing"
)

// TestCut tests that a range represented as segments (from/to) can be cut into
// a new slice of segments where the provided range isn't included.
func TestCut(t *testing.T) {
	assertEqual := func(got, expected [][2]int) {
		if len(expected) != len(got) {
			t.Fatalf("expected %+v, got: %+v", expected, got)
		}
		for i := range expected {
			if expected[i] != got[i] {
				t.Fatalf("expected %+v, got: %+v", expected, got)
			}
		}
	}
	ss := [][2]int{{5, 30}}

	// in:  ....oooooooooooooooooooooooooo.....
	// cut: ..............................#####
	// out: ....oooooooooooooooooooooooooo.....
	ss = cut(ss, 31, 35)
	assertEqual(ss, [][2]int{{5, 30}})

	// in:  ....oooooooooooooooooooooooooo.....
	// cut: ####...............................
	// out: ....oooooooooooooooooooooooooo.....
	ss = cut(ss, 1, 4)
	assertEqual(ss, [][2]int{{5, 30}})

	// in:  ....oooooooooooooooooooooooooo.....
	// cut: #####..............................
	// out: .....ooooooooooooooooooooooooo.....
	ss = cut(ss, 1, 5)
	assertEqual(ss, [][2]int{{6, 30}})

	// in:  .....ooooooooooooooooooooooooo.....
	// cut: .............................######
	// out: .....oooooooooooooooooooooooo......
	ss = cut(ss, 30, 35)
	assertEqual(ss, [][2]int{{6, 29}})

	// in:  .....oooooooooooooooooooooooo......
	// cut: .#########.........................
	// out: ..........ooooooooooooooooooo......
	ss = cut(ss, 2, 10)
	assertEqual(ss, [][2]int{{11, 29}})

	// in:  ..........ooooooooooooooooooo......
	// cut: ...........##......................
	// out: ..........o..oooooooooooooooo......
	ss = cut(ss, 12, 13)
	assertEqual(ss, [][2]int{{11, 11}, {14, 29}})

	// in:  ..........o..oooooooooooooooo......
	// cut: ...........##......................
	// out: ..........o..oooooooooooooooo......
	ss = cut(ss, 12, 13)
	assertEqual(ss, [][2]int{{11, 11}, {14, 29}})

	// in:  ..........o..oooooooooooooooo......
	// cut: ................###................
	// out: ..........o..ooo...oooooooooo......
	ss = cut(ss, 17, 19)
	assertEqual(ss, [][2]int{{11, 11}, {14, 16}, {20, 29}})

	// in:  ..........o..ooo...oooooooooo......
	// cut: .........................###.......
	// out: ..........o..ooo...oooooo...o......
	ss = cut(ss, 26, 28)
	assertEqual(ss, [][2]int{{11, 11}, {14, 16}, {20, 25}, {29, 29}})

	// in:  ..........o..ooo...oooooo...o......
	// cut: ............############...........
	// out: ..........o.............o...o......
	ss = cut(ss, 13, 24)
	assertEqual(ss, [][2]int{{11, 11}, {25, 25}, {29, 29}})

	// in:  ..........o.............o...o......
	// cut: ..........#########################
	// out: ...................................
	ss = cut(ss, 11, 35)
	assertEqual(ss, [][2]int{})
}
