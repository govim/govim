# Test that govim#config#Set("FormatOnSave", "goimports") and GOVIMGoImports work

# Notice below: file.go and file.go.orig are identical. This is so that we
# don't need to copy file.go.orig to file.go before opening file.go Because
# doing so triggers govim to consider the file change from a file watcher
# perspective which throws the observed diagnostics etc.

# Ensure the default is goimports
vim expr 'govim#config#Get().FormatOnSave'
stdout '^"goimports"$'

# :GOVIMGoImports whole file
vim ex 'e! file.go'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex 'GOVIMGoImports'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex 'noautocmd w'
cmp file.go file.go.goimports

# Format on save
cp file.go.orig file.go
vim call 'govim#config#Set' '["FormatOnSave", "goimports"]'
vim ex 'e! file.go'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex 'w'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
cmp file.go file.go.goimports

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

# Format on save (bad syntax)
cp file.go.bad file.go
vim ex 'e! file.go'
errlogmatch -wait 30s 'sendJSONMsg: \[0,\[\d+,"call","s:batchCall",\[\["call","s:mustNothing","setqflist",\[\{"filename":"file\.go","lnum":3,"col":1,"text":"expected declaration, found blah","buf":1\}\],"r"\]\]\]\]'
vim ex 'w'
cmp file.go file.go.bad
vim expr 'getqflist()'
stdout '^\Q[{"bufnr":1,"col":1,"lnum":3,"module":"","nr":0,"pattern":"","text":"expected declaration, found blah","type":"","valid":1,"vcol":0}]\E$'
! stderr .+

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

skip 'Temporarily disable pending https://github.com/golang/go/issues/31150'

# :GOVIMGoImports range
cp file.go.orig file.go
vim ex 'e! file.go'
vim ex '3,5GOVIMGoImports'
vim ex 'noautocmd w'
cmp file.go file.go.goimports

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- go.mod --
module mod.com

-- file.go --
package blah

const ( x = 5
y = os.PathSeparator
 )

-- file.go.orig --
package blah

const ( x = 5
y = os.PathSeparator
 )

-- file.go.bad --
package blah

blah
-- file.go.goimports --
package blah

import "os"

const (
	x = 5
	y = os.PathSeparator
)
