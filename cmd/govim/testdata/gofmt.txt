# Test that govim#config#Set("FormatOnSave", "gofmt") and GOVIMGoFmt work

# :GOVIMGoFmt whole file
cp file.go.orig file.go
vim ex 'e! file.go'
vim ex 'GOVIMGoFmt'
vim ex 'noautocmd w'
cmp file.go file.go.gofmt

# Format on save
cp file.go.orig file.go
vim call 'govim#config#Set' '["FormatOnSave", "gofmt"]'
vim ex 'e! file.go'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex 'w'
cmp file.go file.go.gofmt

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:%v, Message:".*'

# Format on save (bad syntax)
cp file.go.bad file.go
vim ex 'e! file.go'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex 'w'
cmp file.go file.go.bad
vim expr 'getqflist()'
stdout '^\Q[{"bufnr":1,"col":1,"lnum":3,"module":"","nr":0,"pattern":"","text":"expected declaration, found blah","type":"","valid":1,"vcol":0}]\E$'
! stderr .+

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:%v, Message:".*'

skip 'Temporarily disable pending https://github.com/golang/go/issues/31150'

# :GOVIMGoFmt range
cp file.go.orig file.go
vim ex 'e! file.go'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/file.go
vim ex '3,5GOVIMGoFmt'
vim ex 'noautocmd w'
cmp file.go file.go.gofmt

errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:%v, Message:".*'

-- go.mod --
module mod.com

-- file.go.orig --
package blah

const ( x = 5
y = os.PathSeparator
 )

-- file.go.bad --
package blah

blah
-- file.go.gofmt --
package blah

const (
	x = 5
	y = os.PathSeparator
)
