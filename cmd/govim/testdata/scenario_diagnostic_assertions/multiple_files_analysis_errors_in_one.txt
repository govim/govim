# Verify that we don't receive initial diagnostics for files that have only
# analysis errors. Then when we open any file in the package we receive
# diagnostics for files that have analysis errors.
#
# Opening a file does not publish any diagnostics, all things being equal.

[short] skip 'Skip short because we sleep for GOVIM_ERRLOGMATCH_WAIT to verify we haven''t received diagnostics'

sleep $GOVIM_ERRLOGMATCH_WAIT
errlogmatch -count=0 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main.go
errlogmatch -count=0 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/other.go

vim ex 'e main.go'

errlogmatch 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/other.go

# Opening other.go in this way first closes main.go
# which has the effect of zero-ing the analysis
# diagnostics for this package
vim ex 'e other.go'

sleep $GOVIM_ERRLOGMATCH_WAIT
errlogmatch -count=0 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main.go
errlogmatch -count=3 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/other.go

# Assert that we have received no error (Type: 1) or warning (Type: 2) log messages
# Disabled pending resolution to https://github.com/golang/go/issues/34103
# errlogmatch -start -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- go.mod --
module mod.com

go 1.12
-- main.go --
package main

-- other.go --
package main

import "fmt"

func main() {
	fmt.Printf("%v")
}
