# Test that govim#config#Set("FormatOnSave", "gofmt") and GOVIMGoFmt work

# Notice below: file.go and file.go.orig are identical. This is so that we
# don't need to copy file.go.orig to file.go before opening file.go Because
# doing so triggers govim to consider the file change from a file watcher
# perspective which throws the observed diagnostics etc.

# :GOVIMGoFmt whole file
cp file.go file.go.orig
vim ex 'e! file.go'
vim ex 'GOVIMGoFmt'
vim ex 'noautocmd w'
cmp file.go file.go.gofmt

# Format on save
cp file.go.orig file.go
vim call 'govim#config#Set' '["FormatOnSave", "gofmt"]'
vim ex 'e! file.go'
vim ex 'w'
cmp file.go file.go.gofmt

# Format on save (bad syntax)
cp file.go.bad file.go
vim ex 'e! file.go'
vim ex 'w'
cmp file.go file.go.bad
vim ex 'copen'
vim ex 'w errors'
cmp errors errors.golden
vim ex 'cclose'

skip 'Temporarily disable pending https://github.com/golang/go/issues/31150'

# :GOVIMGoFmt range
cp file.go.orig file.go
vim ex 'e! file.go'
vim ex '3,5GOVIMGoFmt'
vim ex 'noautocmd w'
cmp file.go file.go.gofmt

# Disabled pending resolution to https://github.com/golang/go/issues/34103
# errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- go.mod --
module mod.com

go 1.12
-- file.go --
package blah

const ( x = 5
y = x
 )

-- file.go.bad --
package blah

blah
-- file.go.gofmt --
package blah

const (
	x = 5
	y = x
)
-- errors.golden --
file.go|3 col 1| expected declaration, found blah
