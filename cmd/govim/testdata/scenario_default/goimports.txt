# Test that govim#config#Set("FormatOnSave", "goimports") and GOVIMGoImports work

# :GOVIMGoImports whole file
cp file.go file.go.orig
vim ex 'e! file.go'
vim ex 'GOVIMGoImports'
vim ex 'noautocmd w'
cmp file.go file.go.goimports

# Format on save
cp file.go.orig file.go
vim call 'govim#config#Set' '["FormatOnSave", "goimports"]'
vim ex 'e! file.go'
vim ex 'w'
cmp file.go file.go.goimports

# Format on save (bad syntax)
cp file.go.bad file.go
vim ex 'e! file.go'
vim ex 'w'
cmp file.go file.go.bad
vimexprwait errors.golden GOVIMTest_getqflist()

skip 'Temporarily disable pending https://github.com/golang/go/issues/31150'

# :GOVIMGoImports range
cp file.go.orig file.go
vim ex 'e! file.go'
vim ex '3,5GOVIMGoImports'
vim ex 'noautocmd w'
cmp file.go file.go.goimports

# Assert that we have received no error (Type: 1) or warning (Type: 2) log messages
# Disabled pending resolution to https://github.com/golang/go/issues/34103
# errlogmatch -start -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- go.mod --
module mod.com

go 1.12
-- file.go --
package blah

const ( x = 5
y = os.PathSeparator
 )

-- file.go.bad --
package blah

blah
-- file.go.goimports --
package blah

import "os"

const (
	x = 5
	y = os.PathSeparator
)
-- errors.golden --
[
  {
    "bufname": "file.go",
    "col": 1,
    "lnum": 3,
    "module": "",
    "nr": 0,
    "pattern": "",
    "text": "expected declaration, found blah",
    "type": "",
    "valid": 1,
    "vcol": 0
  }
]
