# Test the GOVIMSuggestedFixes feature that sends a LSP CodeAction request to gopls.
# Note that the checks for these tests should be rewritten to use the GOVIM_internal_DumpPopups()
# mechanism as soon as it supports dumping title and visibility of each popup.

[!vim] [!gvim] skip


# Tests basic case with a single diagnostic, no fix selected 
cp main.go.single main.go
vim ex 'e main.go'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\S+,\"sign_placelist\"'

vim ex 'call cursor(6,2)'
vim ex 'GOVIMSuggestedFixes'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"title\":\"self-assignment of x to x\"'
! stderr .+
# Can't do vim ex 'normal .. here since the key press must reach the popup menu
vim ex 'call feedkeys(\"\\<ESC>\", \"xt\")'
errlogmatch -wait 30s 'recvJSONMsg: .*GOVIM_internal_PopupSelection'
vim -stringout expr 'GOVIM_internal_DumpPopups()'
cmp stdout no_popup.golden


# Tests basic case with a single diagnostic, fix applied
vim ex 'GOVIMSuggestedFixes'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"title\":\"self-assignment of x to x\"'
vim ex 'call feedkeys(\"\\<Enter>\", \"xt\")'
errlogmatch -wait 30s 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main.go
vim ex 'w'
cmp main.go main.go.single.golden


# Tests two diagnostics with suggested edits on different lines. Suggested edit should be the
# second one since that is the cursor position line.
cp main.go.different_lines main.go
vim ex 'e! main.go'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\S+,\"sign_placelist\"'

vim ex 'call cursor(7,2)'
vim ex 'GOVIMSuggestedFixes'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"title\":\"self-assignment of y to y\"'
! stderr .+


# Test multiple diagnostics on the same line. They are expected to be sorted alphabetically with a [x/y] added to the
# title to indicate more than one. It shall also be possible to cycle forward and backwards.
cp main.go.same_line main.go
vim ex 'e! main.go'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\S+,\"sign_placelist\"'

vim ex 'call cursor(6,2)'
vim ex 'GOVIMSuggestedFixes'
errlogmatch -wait 30s -peek 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"title\":\"self-assignment of a to a \[1/4\]\"'
errlogmatch -wait 30s -peek 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"hidden\":1.*\"title\":\"self-assignment of b to b \[2/4\]\"'
errlogmatch -wait 30s -peek 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"hidden\":1.*\"title\":\"self-assignment of x to x \[3/4\]\"'
errlogmatch -wait 30s 'sendJSONMsg: .*\"call\",\"popup_create\",\[\"Remove\"\],{.*\"hidden\":1.*\"title\":\"self-assignment of y to y \[4/4\]\"'

# TODO: when it's possible to get the popup title of the visible popup, we can also verify that the cycle buttons really do cycle to the next popup
# What we can do now is to ensure that nothing breaks when we cycle popups

vim ex 'call feedkeys(\"\\<c-n>\", \"xt\")'
errlogmatch -wait 30s -peek 'sendJSONMsg: .*\"call\",\"popup_hide\"'
errlogmatch -wait 30s  'sendJSONMsg: .*\"call\",\"popup_show\"'

vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'
errlogmatch -wait 30s -peek 'sendJSONMsg: .*\"call\",\"popup_hide\"'
errlogmatch -wait 30s  'sendJSONMsg: .*\"call\",\"popup_show\"'

vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'
vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'
vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'
vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'
vim ex 'call feedkeys(\"\\<c-p>\", \"xt\")'

errlogmatch -wait 30s -peek -count 5 'sendJSONMsg: .*\"call\",\"popup_hide\"'
errlogmatch -wait 30s -count 5 'sendJSONMsg: .*\"call\",\"popup_show\"'

# TODO: add tests of diagnostics that have multiple suggested fixes, when added to gopls

# Disabled pending resolution to https://github.com/golang/go/issues/34103
# errlogmatch -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- go.mod --
module mod.com

-- main.go.single --
package main

var x int

func main() {
	x = x
}

-- main.go.single.golden --
package main

var x int

func main() {

}
-- main.go.different_lines --
package main

var x, y int

func main() {
	x = x
	y = y
}

-- main.go.same_line --
package main

var x, y, a, b int

func main() {
	x, y, a, b = x, y, a, b
}

-- no_popup.golden --
